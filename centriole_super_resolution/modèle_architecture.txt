architecture wnresnet34

model BilinearWrapper(
  (model): DynamicUnet(
    (layers): ModuleList(
      (0): Sequential(
        (0): Sequential(
          (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): ReLU(inplace)
        )
        (1): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace)
        )
        (2): Sequential(
          (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): ReLU(inplace)
        )
        (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (4): Sequential(
          (0): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (1): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (2): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
        )
        (5): Sequential(
          (0): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              )
            )
            (idconv): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (2): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (3): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
        )
        (6): Sequential(
          (0): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              )
            )
            (idconv): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (2): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (3): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (4): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (5): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
        )
        (7): Sequential(
          (0): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              )
            )
            (idconv): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
          (2): ResBlock(
            (convs): Sequential(
              (0): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): ReLU(inplace)
              )
              (1): Sequential(
                (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              )
            )
          )
        )
        (8): AdaptiveAvgPool2d(output_size=1)
      )
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Sequential(
        (0): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (1): Sequential(
          (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
      )
      (4): UnetBlock(
        (shuf): PixelShuffle_ICNR(
          (conv): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
          )
          (shuf): PixelShuffle(upscale_factor=2)
          (pad): ReplicationPad2d((1, 0, 1, 0))
          (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
          (relu): ReLU(inplace)
        )
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv1): Sequential(
          (0): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (conv2): Sequential(
          (0): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (relu): ReLU()
      )
      (5): UnetBlock(
        (shuf): PixelShuffle_ICNR(
          (conv): Sequential(
            (0): Conv2d(768, 1536, kernel_size=(1, 1), stride=(1, 1))
          )
          (shuf): PixelShuffle(upscale_factor=2)
          (pad): ReplicationPad2d((1, 0, 1, 0))
          (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
          (relu): ReLU(inplace)
        )
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv1): Sequential(
          (0): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (conv2): Sequential(
          (0): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (relu): ReLU()
      )
      (6): UnetBlock(
        (shuf): PixelShuffle_ICNR(
          (conv): Sequential(
            (0): Conv2d(640, 1280, kernel_size=(1, 1), stride=(1, 1))
          )
          (shuf): PixelShuffle(upscale_factor=2)
          (pad): ReplicationPad2d((1, 0, 1, 0))
          (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
          (relu): ReLU(inplace)
        )
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv1): Sequential(
          (0): Conv2d(448, 448, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (conv2): Sequential(
          (0): Conv2d(448, 448, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): SelfAttention(
            (query): Conv1d(448, 56, kernel_size=(1,), stride=(1,), bias=False)
            (key): Conv1d(448, 56, kernel_size=(1,), stride=(1,), bias=False)
            (value): Conv1d(448, 448, kernel_size=(1,), stride=(1,), bias=False)
          )
        )
        (relu): ReLU()
      )
      (7): UnetBlock(
        (shuf): PixelShuffle_ICNR(
          (conv): Sequential(
            (0): Conv2d(448, 896, kernel_size=(1, 1), stride=(1, 1))
          )
          (shuf): PixelShuffle(upscale_factor=2)
          (pad): ReplicationPad2d((1, 0, 1, 0))
          (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
          (relu): ReLU(inplace)
        )
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv1): Sequential(
          (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (conv2): Sequential(
          (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (relu): ReLU()
      )
      (8): UnetBlock(
        (shuf): PixelShuffle_ICNR(
          (conv): Sequential(
            (0): Conv2d(288, 576, kernel_size=(1, 1), stride=(1, 1))
          )
          (shuf): PixelShuffle(upscale_factor=2)
          (pad): ReplicationPad2d((1, 0, 1, 0))
          (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
          (relu): ReLU(inplace)
        )
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv1): Sequential(
          (0): Conv2d(208, 104, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (conv2): Sequential(
          (0): Conv2d(104, 104, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
        )
        (relu): ReLU()
      )
      (9): PixelShuffle_ICNR(
        (conv): Sequential(
          (0): Conv2d(104, 416, kernel_size=(1, 1), stride=(1, 1))
        )
        (shuf): PixelShuffle(upscale_factor=2)
        (pad): ReplicationPad2d((1, 0, 1, 0))
        (blur): AvgPool2d(kernel_size=2, stride=1, padding=0)
        (relu): ReLU(inplace)
      )
      (10): MergeLayer()
      (11): SequentialEx(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv2d(105, 52, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
          )
          (1): Sequential(
            (0): Conv2d(52, 105, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace)
          )
          (2): MergeLayer()
        )
      )
      (12): Sequential(
        (0): Conv2d(105, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)